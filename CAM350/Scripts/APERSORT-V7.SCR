'
'  $Workfile:   apersort.scr  $
'  $Revision:   1.2  $
'   $Modtime:   Jul 20 1999 16:06:22  $
'      $Date:   Jul 20 1999 16:09:16  $
'     $Owner:   RN $
'   $Logfile:   Y:\CAM350\dev\apersort.scv  $
'
'  Copyright (c) 1998-2000 Innoveda, Inc. (formerly Advanced CAM Technologies, Inc.), all rights reserved.
'

' Advanced CAM Technologies Macro Revision: 1.0
' CAM350 V4.5 Date:  Mon Sep 29 11:22:54 1997

'July 19 1999:
'1. Added a Form to replace user queries
'2. Script now removes unused padstacks before sorting apertures, to avoid having dcodes not being
'	sorted correctly, due to their presence in unused padstacks

'December 19, 2000
'1. Redesigned to handle new aperture types of Ver. 7.0
'2. Redesigned to use an array to hold aperture data, then sort the array

'Watch and Break statements, only used if in Debug mode Remove comment character to activate line

'Watch DcodeShape!
'Watch Highestdcode!
'watch SizeX#
'watch DSizeX#
'Watch Dtemp
'Watch DStart
'Watch Dfind
'Watch D1
'Watch D2
'watch D1S$
'Watch TempString$
'Watch Shape
'Watch Dshape

'Break

10
' Look for Drill Layers
If Drilllayer! > -1 then 
	Print "Cannot sort aperture table with Drill layers present." + CR! + "First remove all Drill layers." + CR! + CR! + "Macro exits. Apertures unchanged."
	goto 150
end if
If Drilllayer_unplated! > -1 then 
	Print "Cannot sort aperture table with Drill layers present." + CR! + "First remove all Drill layers." + CR! + CR! + "Macro exits. Apertures unchanged."
	goto 150
end if

20
'Use Form to gather all the necessary information to sort apertures
OpenForm #1,80,10, "APERTURE SORTING MACRO by Advanced CAM Technologies", character, okcancel
AddForm #1, 0, 0, "This macro will:",Print
AddForm #1, 10, 1, "-->Remove Unused Dcodes and Padstacks", print
AddForm #1, 10, 2, "-->Compress the Aperture Table", print
AddForm #1, 10, 3, "-->Sort the Table Small to Large (transcoding dcodes as it does so)", print
AddForm #1, 0, 4, "",print
AddForm #1, 0, 5, "Sort the Aperture Table Small to Large?", check, YN%
AddForm #1, 10, 6, "-->Please note: sorting may take a few minutes<--",Print
AddForm #1, 0, 7, "",print
AddForm #1, 0, 8, "Move Custom Apertures to the end of the table?", Check, YC%
AddForm #1, 0, 9, "",print
DisplayForm #1
canceled% = formCancel(1)
DeleteForm #1

if canceled% then goto 150

30
' Clear and Remove Unused Dcodes
view_toolbar@
view_statbar@
padstack_remunused@
aptable_compress@
update_dcodebar@
Close_Msg

Break

40
'Check to see if user wants to sort the table
If YN% = 0 then goto 150

50
'Sort Table, move customs to the end if user requests
If YC% = 0 then Movecustoms = 0
If YC% = 1 then Movecustoms = 1

60
' Aperture Table Sort (Small to Large)
Dstart = 9
DTemp = Highestdcode! + 1
Dcustom = (Highestdcode! * 2) + 1
View_Redraw@

'Array to hold Dcode data for sort and Aperture Table update
'MyArray$(x,0) = Dcode number as a string
'MyArray$(x,1) = Text string Dcode description from DcodeDescript!
'MyArray$(x,2) = Dcode Shape as a string from str(DcodeShape!)
'MyArray$(x,3) = Dcode Width as a string from str(DcodeWidth!)
'MyArray$(x,4) = Dcode Height as a string from str(DcodeHeight!)
'MyArray$(x,5) = Moved flag Moved = "0" Not_Moved = "1"

Dim MyArray$(Dtemp - 1, 6)

break

for i = 10 to Dtemp -1
	Print_Msg "Building Aperture Array: D" + str$(i)
	setdcode@ i
	MyArray$(i,0) = str$(i)
	MyArray$(i,1) = DcodeDescript!
	MyArray$(i,2) = str$(DcodeShape!)
	MyArray$(i,3) = str$(DcodeWidth!)
	MyArray$(i,4) = str$(DcodeHeight!)
	MyArray$(i,5) = "1"

next

'Find next smallest aperture by DcodeWidth!, then DcodeHeight!, then DcodeShape!

for i = 10 to Dtemp - 1

	DSizeX# = 10000
	DSizeY# = 10000
	DShape = 50
	
	FoundFlag = 0
	For j = 10 to Dtemp - 1
	if MyArray$(j, 5) = "1" then
		TempInt = MyArray$(j,2)
		if TempInt < 1 then goto 75
		if TempInt = 6 and Movecustoms = 1 then gosub 400
		SizeX# = MyArray$(j,3)		'intentional cast, string to float
		SizeY# = MyArray$(j,4)		'intentional cast, string to float
		Shape = MyArray$(j,2)		'intentional cast, string to int
		if SizeX# < DsizeX# Then
			SmalestPtr = j
			DsizeX# = SizeX#
			DsizeY# = SizeY#
			Dshape = Shape
			FoundFlag = 1
		elseif SizeX# = DsizeX# then
			if SizeY# < DsizeY# then
				SmalestPtr = j
				DsizeY# = SizeY#
				Dshape = Shape
				FoundFlag = 1
			elseif SizeY# = DsizeY# then
				if Shape < Dshape then
					SmalestPtr = j
					Dshape = Shape
					FoundFlag = 1
				end if
			end if
				
		end if
	end if

75
	Next
	
	if foundflag = 0 then goto 100
	Print_Msg "Moving Aperture: D" + str$(SmalestPtr) + ", " + MyArray$(SmalestPtr, 1)

'Move next smallest to end of Aperture Table
		
	CurrentDscript$ = MyArray$(SmalestPtr, 1)
	set_aperture@ (Dtemp - 10 + i), CurrentDscript$
	D1 = SmalestPtr
	D2 = (Dtemp - 10 + i)
	Gosub 200
	MyArray$(SmalestPtr, 5) = "0"	'Mark aperture as moved

Next		

break	

100

' Clean up aperture table
padstack_remunused@
aptable_compress@

150
' Reset workarea and close macro
view_toolbar@
view_statbar@
View_Redraw@

Print_msg "Aperture Table Processing Complete"
delay 2000
close_msg

end

'*************************** Subroutines Begin Here ****************************************

' Transcode Subroutine
' Transcodes ALL occurances of D1 to D2
200
Break
layer_alloff@ 0
setdcode@ D1
D1S$ = D1		'Set string variable for use with select all function in Edit|Change|Dcode

' Change dcode from D1 to D2
change_dcode@
setbydcode@ D1S$
setbytoolref@ ""
setbytabid@ ""
edit_selectall2@ 
edit_chgdcode@ D2
back@
return

' Move customs to the end of the table
400
' Create custom dcode information

Break

Print_Msg "Moving Custom: D" + str$(j) + ", " + MyArray$(j, 1)

CurrentDscript$ = MyArray$(j, 1)
set_aperture@ Dcustom, CurrentDscript$
D1 = j
D2 = Dcustom
Gosub 200
Dcustom = Dcustom + 1
MyArray$(j, 5) = "0"		'Mark aperture as moved

return

